(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{73:function(e,t,i){"use strict";i.r(t),i.d(t,"frontMatter",(function(){return o})),i.d(t,"metadata",(function(){return l})),i.d(t,"toc",(function(){return c})),i.d(t,"default",(function(){return b}));var n=i(3),a=i(7),r=(i(0),i(84)),o={title:"Technical Overview of Heuristic Search based Exploration",sidebar_label:"Exploration Overview"},l={unversionedId:"exploration/exploration",id:"exploration/exploration",isDocsHomePage:!1,title:"Technical Overview of Heuristic Search based Exploration",description:"Our Heuristic Search based Exploration allows to automatically optimize",source:"@site/docs/exploration/exploration.md",slug:"/exploration/exploration",permalink:"/doc/exploration/exploration",version:"current",sidebar_label:"Exploration Overview",sidebar:"docs",previous:{title:"A Tutorial of Heuristic Search based Exploration in RISE",permalink:"/doc/exploration/tutorial"}},c=[{value:"Heuristic Search Algorithms",id:"heuristic-search-algorithms",children:[]},{value:"Heuristics",id:"heuristics",children:[]},{value:"Heuristic panels",id:"heuristic-panels",children:[]},{value:"Runner",id:"runner",children:[{value:"Metaheuristic",id:"metaheuristic",children:[]},{value:"Executor",id:"executor",children:[]}]}],s={toc:c};function b(e){var t=e.components,i=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},s,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Our ",Object(r.b)("em",{parentName:"p"},"Heuristic Search based Exploration")," allows to automatically optimize\n",Object(r.b)("a",{parentName:"p",href:"/tutorial#high-level-program"},"High-Level RISE Programs")," by applying rewrite rules\n(and more generally ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",{parentName:"em",href:"/tutorial#optimization-strategy"},"ELEVATE Optimization Strategies")),")\nin an explorative process that is guided by ",Object(r.b)("em",{parentName:"p"},Object(r.b)("a",{parentName:"em",href:"#heuristic-search-algorithms"},"Heuristic Search Algorithms")),"."),Object(r.b)("h2",{id:"heuristic-search-algorithms"},"Heuristic Search Algorithms"),Object(r.b)("p",null,"Heuristic search algorithms for optimisation problems are build up on three main components. "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A solution ",Object(r.b)("inlineCode",{parentName:"li"},"s"),", which represents a possible solution for the optimisation problem"),Object(r.b)("li",{parentName:"ul"},"A function ",Object(r.b)("inlineCode",{parentName:"li"},"f"),", which returns a numerical function value for a given solution ",Object(r.b)("inlineCode",{parentName:"li"},"s")),Object(r.b)("li",{parentName:"ul"},"A function ",Object(r.b)("inlineCode",{parentName:"li"},"N"),", which returns a set of solutions called neighbourhood ",Object(r.b)("inlineCode",{parentName:"li"},"N(s)")," for a given solution ",Object(r.b)("inlineCode",{parentName:"li"},"s"))),Object(r.b)("p",null,"The main principle of heurisitic search algorithms is the evaluation of the neighbourhood of the\ncurrent best solution by comparing the function values of neighbors, then picking the new best\nsolution and repeat the process.\nThe individual heuristic search algorithms differ in their decision\nstrategy on which solutions from the neighbourhood to choose. "),Object(r.b)("h2",{id:"heuristics"},"Heuristics"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Heuristic[P]")," trait provides an abstraction across different Heuristic Search Algorithms,\nsuch as ",Object(r.b)("em",{parentName:"p"},"Iterative Improvement")," or ",Object(r.b)("em",{parentName:"p"},"Random"),".\nThe trait provides a single function ",Object(r.b)("inlineCode",{parentName:"p"},"start")," that each Heuristic Search Algorithm has to implement. "),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"def start(panel: HeuristicPanel[P],\n          initialSolution: Solution[P],\n          depth: Int): (P,              // The best found program\n                        Option[Double], // The function value for the best program\n                        Path[P]         // The path of rewritten expressions leading to the best program\n                       )\n")),Object(r.b)("h2",{id:"heuristic-panels"},"Heuristic panels"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"HeuristicPanel[P]")," trait for provides the two main functions ",Object(r.b)("inlineCode",{parentName:"p"},"f")," and ",Object(r.b)("inlineCode",{parentName:"p"},"N")," mentioned above."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"def f(solution: Solution[P]): Option[Double]\ndef N(solution: Solution[P]): Set[Solution[P]]\n")),Object(r.b)("h2",{id:"runner"},"Runner"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Runner[P]")," trait is used by the ",Object(r.b)("inlineCode",{parentName:"p"},"HeuristicPanel[P]")," implementation to\ndetermine the function value ",Object(r.b)("inlineCode",{parentName:"p"},"f(s)")," for a given solution.\nIt provides a single ",Object(r.b)("inlineCode",{parentName:"p"},"execute")," function."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"def execute(solution: Solution[P]): (P, Option[Double]) // Program and function value\n")),Object(r.b)("p",null,"A Runner is abstract. It has two realisations ",Object(r.b)("inlineCode",{parentName:"p"},"Metaheuristic")," and ",Object(r.b)("inlineCode",{parentName:"p"},"Executor"),".\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"Metaheuristic")," runner starts a nested search heuristic to determine the function value.\nThe ",Object(r.b)("inlineCode",{parentName:"p"},"Executor")," runner directly executes the given solution.\nThis allows to nest and combine different heuristic search algorithms."),Object(r.b)("h3",{id:"metaheuristic"},"Metaheuristic"),Object(r.b)("p",null,"A ",Object(r.b)("inlineCode",{parentName:"p"},"Metaheuristic")," is a realisation of a ",Object(r.b)("inlineCode",{parentName:"p"},"Runner"),".\nIt specifies the execution function of a heursitic search algorithm.\nIt can be specified with another metaheursitic as its ",Object(r.b)("inlineCode",{parentName:"p"},"Runner"),".\nThis way, different heuristics can be combined together to configure a nested exploration.\nA ",Object(r.b)("inlineCode",{parentName:"p"},"Metaheuristic")," is implemented in terms of: "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"the ",Object(r.b)("inlineCode",{parentName:"li"},"heuristic")," algorithm used at this layer, "),Object(r.b)("li",{parentName:"ul"},"the ",Object(r.b)("inlineCode",{parentName:"li"},"depth")," depth of the algorithm, e.g. how many steps a random algorithms goes down,"),Object(r.b)("li",{parentName:"ul"},"the number of ",Object(r.b)("inlineCode",{parentName:"li"},"iterations"),", e.g. it sometimes makes sense to repeat the execution (e.g. for for Random),"),Object(r.b)("li",{parentName:"ul"},"the ",Object(r.b)("inlineCode",{parentName:"li"},"Runner")," used as executor. This can be either a nested ",Object(r.b)("inlineCode",{parentName:"li"},"Metaheuristic")," or an ",Object(r.b)("inlineCode",{parentName:"li"},"Executor"),".")),Object(r.b)("h3",{id:"executor"},"Executor"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"Executor")," represents the base-case of a ",Object(r.b)("inlineCode",{parentName:"p"},"Metaheuristic")," as it directly executes\nand measures performance to determine the function value ",Object(r.b)("inlineCode",{parentName:"p"},"f(s)")," while the other\n",Object(r.b)("inlineCode",{parentName:"p"},"Metaheuristics")," start a nested heuristic search algorithm to determine ",Object(r.b)("inlineCode",{parentName:"p"},"f(s)"),".\nIt is implemented specifically for ",Object(r.b)("inlineCode",{parentName:"p"},"RISE")," (while the ",Object(r.b)("inlineCode",{parentName:"p"},"Metaheuristic")," is generic)\nand can be specified with: "),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"the number of",Object(r.b)("inlineCode",{parentName:"li"},"iterations")," to perform,"),Object(r.b)("li",{parentName:"ul"},"a ",Object(r.b)("inlineCode",{parentName:"li"},"threshold")," factor (compared to the fastest executed runtime) to filter out expressions with slow execution times. ")))}b.isMDXComponent=!0}}]);