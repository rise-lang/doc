(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{72:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return r})),t.d(n,"default",(function(){return p}));var i=t(3),a=t(7),l=(t(0),t(84)),o={id:"setup",title:"Technical Setup",sidebar_label:"Technical Setup"},c={unversionedId:"setup",id:"setup",isDocsHomePage:!1,title:"Technical Setup",description:"Basic Setup",source:"@site/docs/setup.md",slug:"/setup",permalink:"/doc/setup",version:"current",sidebar_label:"Technical Setup",sidebar:"docs",previous:{title:"RISE Language Documentation",permalink:"/doc/"},next:{title:"An overview of the RISE language, and the Shine compiler",permalink:"/doc/overview"}},r=[{value:"Basic Setup",id:"basic-setup",children:[]},{value:"Configuring IntelliJ",id:"configuring-intellij",children:[]},{value:"Installing Dependencies",id:"installing-dependencies",children:[{value:"Docker Image",id:"docker-image",children:[]},{value:"On Debian:",id:"on-debian",children:[]},{value:"On NixOS:",id:"on-nixos",children:[]}]}],b={toc:r};function p(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(i.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h2",{id:"basic-setup"},"Basic Setup"),Object(l.b)("p",null,"Prerequisites: ",Object(l.b)("a",{parentName:"p",href:"https://git-scm.com/"},Object(l.b)("inlineCode",{parentName:"a"},"git")),", ",Object(l.b)("a",{parentName:"p",href:"https://openjdk.java.net/install/"},Object(l.b)("inlineCode",{parentName:"a"},"Java 8+ SDK")),", ",Object(l.b)("a",{parentName:"p",href:"https://www.scala-sbt.org/"},Object(l.b)("inlineCode",{parentName:"a"},"sbt")),", ",Object(l.b)("a",{parentName:"p",href:"https://www.khronos.org/opencl/"},Object(l.b)("inlineCode",{parentName:"a"},"OpenCL"))),Object(l.b)("p",null,Object(l.b)("a",{parentName:"p",href:"#installing-dependencies"},"See more details on installing the dependencies below"),"."),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Clone the ",Object(l.b)("a",{parentName:"li",href:"https://github.com/rise-lang/shine"},Object(l.b)("inlineCode",{parentName:"a"},"shine"))," repository to a directory of your choice that we call ",Object(l.b)("inlineCode",{parentName:"li"},"$SHINE_ROOT"),"."),Object(l.b)("li",{parentName:"ol"},"In ",Object(l.b)("inlineCode",{parentName:"li"},"$SHINE_ROOT"),", run ",Object(l.b)("inlineCode",{parentName:"li"},"setup.sh")," to download all required submodules."),Object(l.b)("li",{parentName:"ol"},"Run ",Object(l.b)("inlineCode",{parentName:"li"},"sbt compile")," (perform this steps even if you want to use IDEA IntelliJ, because IntelliJ does not execute all subproject dependencies correctly that are required for an initial setup)."),Object(l.b)("li",{parentName:"ol"},"Run ",Object(l.b)("inlineCode",{parentName:"li"},"sbt test"),".")),Object(l.b)("h2",{id:"configuring-intellij"},"Configuring IntelliJ"),Object(l.b)("ol",{start:4},Object(l.b)("li",{parentName:"ol"},"Download IDEA IntelliJ (",Object(l.b)("a",{parentName:"li",href:"http://www.jetbrains.com/idea/"},"http://www.jetbrains.com/idea/"),") and choose to install the Scala Plugin during setup."),Object(l.b)("li",{parentName:"ol"},"Launch IntelliJ. From the menu choose ",Object(l.b)("inlineCode",{parentName:"li"},"File")," -> ",Object(l.b)("inlineCode",{parentName:"li"},"Open..."),". Then, select ",Object(l.b)("inlineCode",{parentName:"li"},"$SHINE_ROOT")," and press ",Object(l.b)("inlineCode",{parentName:"li"},"OK"),"."),Object(l.b)("li",{parentName:"ol"},"From the menu bar choose ",Object(l.b)("inlineCode",{parentName:"li"},"Run")," -> ",Object(l.b)("inlineCode",{parentName:"li"},"Edit Configurations..."),". Under ",Object(l.b)("inlineCode",{parentName:"li"},"Templates")," choose ",Object(l.b)("inlineCode",{parentName:"li"},"ScalaTest")," and add the following line to ",Object(l.b)("inlineCode",{parentName:"li"},"VM parameters"),": ",Object(l.b)("inlineCode",{parentName:"li"},"-Djava.library.path=lib/executor/lib/Executor/build -Xss26m")," (this will tell IntelliJ where to find the Executor library and use 26MB of thread stack size which is needed for arithmetic simplifactions sometimes).")),Object(l.b)("h2",{id:"installing-dependencies"},"Installing Dependencies"),Object(l.b)("h3",{id:"docker-image"},"Docker Image"),Object(l.b)("p",null,"You can find the build file for a Docker image here:\n",Object(l.b)("a",{parentName:"p",href:"https://github.com/michel-steuwer/docker-scala-opencl"},"https://github.com/michel-steuwer/docker-scala-opencl")),Object(l.b)("p",null,"Note that AMD's SDK is stored with ",Object(l.b)("inlineCode",{parentName:"p"},"git lfs"),", so you will have to download it after checking out the repository."),Object(l.b)("h3",{id:"on-debian"},"On Debian:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Install Portable OpenCL: ",Object(l.b)("inlineCode",{parentName:"li"},"apt-get install pocl")),Object(l.b)("li",{parentName:"ol"},"Install the build dependencies:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre"},"apt-get install cmake software-properties-common g++ clang-7 libxtst6 libxrender1 libxext6\nln -s /usr/bin/clang-7 /usr/bin/clang\nln -s /usr/bin/clang-cpp-7 /usr/bin/clang++\n")))),Object(l.b)("h3",{id:"on-nixos"},"On NixOS:"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Add ",Object(l.b)("inlineCode",{parentName:"li"},"pkgs.intel-ocl")," to ",Object(l.b)("inlineCode",{parentName:"li"},"hardware.opengl.extraPackages")," and ",Object(l.b)("inlineCode",{parentName:"li"},"nixos-rebuild"),".\nRunning ",Object(l.b)("inlineCode",{parentName:"li"},"nix-shell -p clinfo --run clinfo")," should show OpenCL support."),Object(l.b)("li",{parentName:"ol"},"You will need ",Object(l.b)("inlineCode",{parentName:"li"},"sbt"),", ",Object(l.b)("inlineCode",{parentName:"li"},"cmake")," and ",Object(l.b)("inlineCode",{parentName:"li"},"gcc")," to compile the project: ",Object(l.b)("inlineCode",{parentName:"li"},"nix-env -iA nixos.sbt nixos.cmake nixos.gcc"),"."),Object(l.b)("li",{parentName:"ol"},"You will need ",Object(l.b)("inlineCode",{parentName:"li"},"clang")," to run some of the tests, however some utilities clash with ",Object(l.b)("inlineCode",{parentName:"li"},"gcc"),"s, so we need to:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre"},"nix-env --set-flag priority 15 gcc-wrapper # give gcc less priority\nnix-env -iA nixos.clang                    # install clang\n"))),Object(l.b)("li",{parentName:"ol"},"Help ",Object(l.b)("inlineCode",{parentName:"li"},"FindOpenCL")," find the OpenCL library in NixOS:",Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",{parentName:"pre"},"export LD_LIBRARY_PATH=\"${nix-build '<nixos>' --no-build-output ocl-icd}/lib/:$LD_LIBRARY_PATH\"\nsbt compile\n")),"(From now on ",Object(l.b)("inlineCode",{parentName:"li"},"sbt compile")," does not need to be told where the OpenCL bindings are.)"),Object(l.b)("li",{parentName:"ol"},"We can now run the tests with ",Object(l.b)("inlineCode",{parentName:"li"},"sbt test"),".")))}p.isMDXComponent=!0}}]);