(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{74:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return r})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return s}));var i=t(3),a=t(7),l=(t(0),t(84)),o={id:"install",title:"Install RISE",sidebar_label:"Install"},r={unversionedId:"install",id:"install",isDocsHomePage:!1,title:"Install RISE",description:"Overview",source:"@site/docs/install.md",slug:"/install",permalink:"/doc/install",version:"current",sidebar_label:"Install"},c=[{value:"Overview",id:"overview",children:[]},{value:"Setup",id:"setup",children:[]}],b={toc:c};function s(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(i.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h3",{id:"overview"},"Overview"),Object(l.b)("p",null,"This repository contains an implementation of the RISE language and its Shine compiler (",Object(l.b)("a",{parentName:"p",href:"https://rise-lang.org/"},"https://rise-lang.org/"),")."),Object(l.b)("p",null,"The source code for the compiler is organised into sub-packages of the ",Object(l.b)("inlineCode",{parentName:"p"},"shine")," package."),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"DPIA")," contains the implementation of Data Parallel Idealised Algol.\nThe ",Object(l.b)("inlineCode",{parentName:"li"},"Compilation")," sub-package contains the implementation to rewrite a\nhigh-level functional program into an imperative representation.\nBackend specific code generators for C, OpenMP and OpenCL are in their\nown packages.\nA paper describing DPIA is available at (",Object(l.b)("a",{parentName:"li",href:"https://arxiv.org/abs/1710.08332"},"https://arxiv.org/abs/1710.08332"),").\n"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"C")," contains the C backend printing an imperative DPIA representation into\nC code.\n"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"OpenMP")," contains the OpenMP backend printing an imperative DPIA\nrepresentation into OpenMP code. The C backend is used to print most\ncode.\nThis package also defines extensions in form of additional patterns\nadded to the RISE language and ",Object(l.b)("inlineCode",{parentName:"li"},"DPIA"),".\n"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"OpenCL")," contains the OpenCL backend printing an imperative DPIA\nrepresentation into OpenCL code.\nThis package also defines extensions in form of additional patterns\nadded to the RISE language and ",Object(l.b)("inlineCode",{parentName:"li"},"DPIA"),".")),Object(l.b)("h3",{id:"setup"},"Setup"),Object(l.b)("p",null,"Prerequisits: Java 8+ SDK, ",Object(l.b)("inlineCode",{parentName:"p"},"git")),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"Clone the ",Object(l.b)("inlineCode",{parentName:"li"},"shine")," repository to a directory of your choice that we call ",Object(l.b)("inlineCode",{parentName:"li"},"$SHINE_ROOT"),"."),Object(l.b)("li",{parentName:"ol"},"In ",Object(l.b)("inlineCode",{parentName:"li"},"$SHINE_ROOT"),", run ",Object(l.b)("inlineCode",{parentName:"li"},"setup.sh")," to download all required submodules."),Object(l.b)("li",{parentName:"ol"},"Then run ",Object(l.b)("inlineCode",{parentName:"li"},"sbt compile")," (even if you want to use IDEA IntelliJ, because IntelliJ does not execute subproject dependencies correctly and the Executor needs to be built once in the beginning).")),Object(l.b)("h4",{id:"configuring-intellij"},"Configuring IntelliJ"),Object(l.b)("ol",{start:4},Object(l.b)("li",{parentName:"ol"},"Download IDEA IntelliJ (",Object(l.b)("a",{parentName:"li",href:"http://www.jetbrains.com/idea/"},"http://www.jetbrains.com/idea/"),") and choose to install the Scala Plugin during setup."),Object(l.b)("li",{parentName:"ol"},"Launch IntelliJ. From the menu choose ",Object(l.b)("inlineCode",{parentName:"li"},"File")," -> ",Object(l.b)("inlineCode",{parentName:"li"},"Open..."),". Then, select ",Object(l.b)("inlineCode",{parentName:"li"},"$SHINE_ROOT")," and press ",Object(l.b)("inlineCode",{parentName:"li"},"OK"),"."),Object(l.b)("li",{parentName:"ol"},"From the menu bar choose ",Object(l.b)("inlineCode",{parentName:"li"},"Run")," -> ",Object(l.b)("inlineCode",{parentName:"li"},"Edit Configurations..."),". Under ",Object(l.b)("inlineCode",{parentName:"li"},"Templates")," choose ",Object(l.b)("inlineCode",{parentName:"li"},"ScalaTest")," and add the following line to ",Object(l.b)("inlineCode",{parentName:"li"},"VM parameters"),": ",Object(l.b)("inlineCode",{parentName:"li"},"-Djava.library.path=lib/executor/lib/Executor/build -Xss26m")," (this will tell IntelliJ where to find the Executor library and use 26MB of thread stack size which is needed for arithmetic simplifactions sometimes).")))}s.isMDXComponent=!0}}]);